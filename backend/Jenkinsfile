podTemplate(
        label: 'mypod',
        containers: [
                containerTemplate(name: 'git', image: 'alpine/git', ttyEnabled: true, command: 'cat'),
                containerTemplate(name: 'docker', image: 'docker', command: 'cat', ttyEnabled: true),
                containerTemplate(name: 'kubectl', image: 'lachlanevenson/k8s-kubectl:v1.20.1', command: 'cat', ttyEnabled: true)
        ],
        volumes: [
                hostPathVolume(mountPath: '/var/run/docker.sock', hostPath: '/var/run/docker.sock'),
                hostPathVolume(mountPath: '/root/.gradle', hostPath: '/root/.gradle'),
        ]
) {
    node('mypod') {
        def services = ['api', 'transaction-service', 'transaction-import-service']
        def buildImages = [:]
        def deployments = [:]

        services.each { service ->
            deployments[service] = {
                stage("Deploy ${service}") {
                    dir("backend/${service}") {
                        sh "sed -i 's/\$DOCKER_REGISTRY_PREFIX/${env.DOCKER_REGISTRY_PREFIX}/g' manifest.yaml"
                        sh "sed -i 's/\$BUILD_ID/${env.BUILD_ID}/g' manifest.yaml"
                        sh "kubectl apply -f manifest.yaml --namespace=default"
                    }
                }
            }

            buildImages[service] = {
                stage("Build docker image for ${service}") {
                    dir("backend/${service}") {
                        sh "docker build -t ${env.DOCKER_REGISTRY_PREFIX}/${service}:${env.BUILD_ID} -t ${env.DOCKER_REGISTRY_PREFIX}/${service}:latest ."
                        sh "docker push ${env.DOCKER_REGISTRY_PREFIX}/${service}:${env.BUILD_ID}"
                    }
                }
            }
        }

        stage('Clone repository') {
            container('git') {
                checkout scm
            }
        }

        stage('Build') {
            withCredentials([usernamePassword(credentialsId: 'nexus', usernameVariable: 'NEXUS_USERNAME', passwordVariable: 'NEXUS_PASSWORD')]) {
                sh './backend/gradlew build -p backend --warning-mode all'
            }
        }

        stage('Build docker image') {
            container('docker') {
                parallel buildImages
            }
        }

        stage('Deploy') {
            container('kubectl') {
                parallel deployments
            }
        }
    }
}