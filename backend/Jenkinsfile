podTemplate(
        label: 'build-slave',
        containers: [
                containerTemplate(name: 'git', image: 'alpine/git', ttyEnabled: true, command: 'cat'),
                containerTemplate(name: 'docker', image: 'docker', command: 'cat', ttyEnabled: true),
                containerTemplate(name: 'kubectl', image: 'lachlanevenson/k8s-kubectl:v1.23.6', command: 'cat', ttyEnabled: true),
                containerTemplate(name: 'jdk', image: 'eclipse-temurin:17.0.3_7-jdk', command: 'cat', ttyEnabled: true),
                containerTemplate(name: 'sbt', image: 'hseeberger/scala-sbt:17.0.2_1.6.2_3.1.1', command: 'cat', ttyEnabled: true)
        ],
        volumes: [
                hostPathVolume(mountPath: '/var/run/docker.sock', hostPath: '/var/run/docker.sock'),
                hostPathVolume(mountPath: '/root/.gradle', hostPath: '/root/.gradle'),
        ]
) {
    node('build-slave') {
        def services = ['transaction-service', 'subscription-service', 'investment-service']
        def buildImages = [:]
        def deployments = [:]
        def builds = [:]
        def docker_images = {}

        services.each { service ->
            deployments[service] = {
                stage("Deploy ${service}") {
                    dir("backend/${service}") {
                        sh "sed -i 's#\$DOCKER_IMAGE#${docker_images[service].trim()}#g' manifest.yaml"
                        sh "kubectl apply -f manifest.yaml --namespace=default"
                    }
                }
            }

            buildImages[service] = {
                stage("Build docker image for ${service}") {
                    dir("backend/${service}") {
                        sh "docker build -t ${env.DOCKER_REGISTRY_PREFIX}/${service}:latest ."
                        sh "docker push ${env.DOCKER_REGISTRY_PREFIX}/${service}:latest"
                        docker_images[service] = sh(script: "docker inspect --format='{{index .RepoDigests 0}}' ${env.DOCKER_REGISTRY_PREFIX}/${service}:latest", returnStdout: true)
                    }
                }
            }
        }

        stage('Clone repository') {
            container('git') {
                checkout scm
            }
        }

        stage('Build') {
            builds["Build gradle projects"] = {
                container('jdk') {
                    withCredentials([usernamePassword(credentialsId: 'nexus', usernameVariable: 'NEXUS_USERNAME', passwordVariable: 'NEXUS_PASSWORD')]) {
                        sh './backend/gradlew build package -p backend --warning-mode all --no-daemon --parallel'
                    }
                }
            }

            builds["Build sbt service"] = {
                container('sbt') {
                    dir('./backend/subscription-service') {
                        sh 'sbt ";assembly;scalafixAll --check"'
                    }
                }
            }

            builds["Build mill service"] = {
                container('sbt') {
                    dir('./backend/investment-service') {
                        sh './mill main.assbemly'
                    }
                }
            }

            parallel(builds)
        }

        stage('Build docker image') {
            container('docker') {
                parallel buildImages
            }
        }

        stage('Deploy') {
            container('kubectl') {
                parallel deployments
            }
        }
    }
}