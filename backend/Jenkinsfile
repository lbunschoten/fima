podTemplate(
        label: 'mypod',
        containers: [
                containerTemplate(name: 'git', image: 'alpine/git', ttyEnabled: true, command: 'cat'),
                containerTemplate(name: 'docker', image: 'docker', command: 'cat', ttyEnabled: true),
                containerTemplate(name: 'kubectl', image: 'lachlanevenson/k8s-kubectl:v1.20.1', command: 'cat', ttyEnabled: true),
                containerTemplate(name: 'jdk', image: 'adoptopenjdk/openjdk15:jdk-15.0.1_9-alpine-slim', command: 'cat', ttyEnabled: true),
                containerTemplate(name: 'sbt', image: 'hseeberger/scala-sbt:15.0.2_1.4.7_2.13.5', command: 'cat', ttyEnabled: true)
        ],
        volumes: [
                hostPathVolume(mountPath: '/var/run/docker.sock', hostPath: '/var/run/docker.sock'),
                hostPathVolume(mountPath: '/root/.gradle', hostPath: '/root/.gradle'),
        ]
) {
    node('mypod') {
        def services = ['api', 'transaction-service', 'transaction-import-service']
        def buildImages = [:]
        def deployments = [:]
        def docker_images = {}

        services.each { service ->
            deployments[service] = {
                stage("Deploy ${service}") {
                    dir("backend/${service}") {
                        sh "sed -i 's#\$DOCKER_IMAGE#${docker_images[service].trim()}#g' manifest.yaml"
                        sh "kubectl apply -f manifest.yaml --namespace=default"
                    }
                }
            }

            deployments["subscription-service"] = {
                stage("Deploy subscription-service") {
                    dir("backend/subscription-service") {
                        sh "sed -i 's#\$DOCKER_IMAGE#${docker_images["subscription-service"].trim()}#g' manifest.yaml"
                        sh "kubectl apply -f manifest.yaml --namespace=default"
                    }
                }
            }

            buildImages[service] = {
                stage("Build docker image for ${service}") {
                    dir("backend/${service}") {
                        sh "docker build -t ${env.DOCKER_REGISTRY_PREFIX}/${service}:latest ."
                        sh "docker push ${env.DOCKER_REGISTRY_PREFIX}/${service}:latest"
                        docker_images[service] = sh(script: "docker inspect --format='{{index .RepoDigests 0}}' ${env.DOCKER_REGISTRY_PREFIX}/${service}:latest", returnStdout: true)
                    }
                }
            }

            buildImages["subscription-service"] = {
                stage("Build docker image for subscription-service") {
                    dir("backend/subscription-service") {
                        sh "docker build -t ${env.DOCKER_REGISTRY_PREFIX}/subscription-service:latest ."
                        sh "docker push ${env.DOCKER_REGISTRY_PREFIX}/subscription-service:latest"
                        docker_images["subscription-service"] = sh(script: "docker inspect --format='{{index .RepoDigests 0}}' ${env.DOCKER_REGISTRY_PREFIX}/subscription-service:latest", returnStdout: true)
                    }
                }
            }
        }

        stage('Clone repository') {
            container('git') {
                checkout scm
            }
        }

        stage('Build') {
            container('jdk') {
                withCredentials([usernamePassword(credentialsId: 'nexus', usernameVariable: 'NEXUS_USERNAME', passwordVariable: 'NEXUS_PASSWORD')]) {
                    sh './backend/gradlew build package -p backend --warning-mode all --no-daemon --parallel'
                }
            }
            container('sbt') {
                dir('./backend/subscription-service') {
                    sh 'sbt assembly'
                }
            }
        }

        stage('Build docker image') {
            container('docker') {
                parallel buildImages
            }
        }

        stage('Deploy') {
            container('kubectl') {
                parallel deployments
            }
        }
    }
}